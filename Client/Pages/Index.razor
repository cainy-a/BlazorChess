@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChess.Client.Components
@using BlazorChess.Shared
@inject NavigationManager _navigationManager
@implements IAsyncDisposable

@if (!IsConnected)
{
	<h3 style="text-align: center">
		<div class="ui active inline loader"></div> Connecting to server, please wait.
	</h3>
}

<div class="board-flex-container">
	<Chessboard Game="@_game" />

	<div class="ui card chessboard-sidebar fluid inverted">
		<div style="width: max-content; margin-bottom: 1rem">
			<h1 style="margin: 0">Welcome to QS Chess</h1>
			<h3 style="margin: 0; text-align: right">Quick, Simple Chess</h3>
		</div>
		<p>No signups, leaderboards, social features, weird gamemodes, none of that. It's just chess. Easy and simple.</p>

		<p>TODO FOR FUTURE ME: Important game info here 🔽</p>
		<div class="fluid inverted placeholder ui">
			@foreach (var n in new[] {5, 7, 3})
			{
				<div class="paragraph">
					@for (var i = 0; i < n; i++)
					{
						<div class="line"></div>
					}
				</div>
			}
		</div>
	</div>
</div>

@code {
	private HubConnection _hubConnection;
	private string _pos1;
	private string _pos2;
	private ChessGame _game = new();

	// SignalR stuff
	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/chesshub")).Build();

		_hubConnection.On<string, string>("ReceiveMove", (pos1, pos2) => { StateHasChanged(); });

		await _hubConnection.StartAsync();
	}

	Task Send() => _hubConnection.SendAsync("SendMove", _pos1, _pos2);

	public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync() { await _hubConnection.DisposeAsync(); }
}