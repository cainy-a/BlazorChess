@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChess.Shared
@inject NavigationManager _navigationManager
@implements IAsyncDisposable

@{
	const string cellDimensions = "5rem";
	const string lightColour = "#bcbcbc";
	const string darkColour = "#777777";
}

@if (!IsConnected)
{
	<h3 style="text-align: center">
		<div class="active inline loader ui"></div> Connecting to server, please wait.
	</h3>
}

<div style="display: flex;">
	<div class="chessboard">
		@for (var i = 0; i < 64; i++)
		{
			<div class="chessboard-cell" style="background-color: @(i % 2 == (i / 8 % 2 == 0 ? 0 : 1) ? lightColour : darkColour)">
				@_board?.Cells.ElementAtOrDefault(i)?.Character
			</div>
		}
	</div>
	
	<div class="chessboard-sidebar ui fluid inverted card">
		<div style="width: max-content; margin-bottom: 1rem">
			<h1 style="margin: 0">Welcome to QS Chess</h1>
			<h3 style="margin: 0; text-align: right">Quick, Simple Chess</h3>
		</div>
		<p>No signups, leaderboards, social features, weird gamemodes, none of that. It's just chess. Easy and simple.</p>

		<p>TODO FOR FUTURE ME: Important game info here 🔽</p>
		<div class="ui inverted fluid placeholder">
			<div class="paragraph">
				@for (var i = 0; i < 5; i++)
				{
					<div class="line"></div>
				}
			</div>
			<div class="paragraph">
				@for (var i = 0; i < 7; i++)
				{
					<div class="line"></div>
				}
			</div>
			<div class="paragraph">
				@for (var i = 0; i < 3; i++)
				{
					<div class="line"></div>
				}
			</div>
		</div>
	</div>
</div>

<style>
	.chessboard {
		display: grid;
		grid-template-columns: repeat(8, @cellDimensions);
		grid-auto-rows: @cellDimensions;
		border: solid 1px darkgrey;
		width: min-content;
	}
	.chessboard-cell {
		color: black;
		font-size: calc(@cellDimensions - 1rem);
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.chessboard-sidebar {
		margin: 0 0 0 1rem !important;
		padding: 1rem !important;
	}
</style>

@code {
	private HubConnection _hubConnection;
	private string _pos1;
	private string _pos2;
	private ChessBoard _board = ChessBoard.DefaultChessBoard;

	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/chesshub")).Build();

		_hubConnection.On<string, string>("ReceiveMove", (pos1, pos2) => { StateHasChanged(); });

		await _hubConnection.StartAsync();
	}

	Task Send() => _hubConnection.SendAsync("SendMove", _pos1, _pos2);

	public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync() { await _hubConnection.DisposeAsync(); }
}